package tarefaThreadSemaphoreShow.controller;

import java.util.Random;
import java.util.concurrent.Semaphore;

public class ThreadShow extends Thread {

	private static int quantidadeingressosTotal = 100;
	private int tempoEsperaLogin;
	private int tempoEsperaCompraIng;
	private int idPessoa;
	private int quantidadeIngressos;
	private Semaphore semaforo;

	public ThreadBilheteria(int idPessoa, int quantingressos, Semaphore semaforo) {
		this.tempoEsperaLogin = 0;
		this.idPessoa = idPessoa;
		this.quantingressos = quantingressos;
		this.semaforo = semaforo;
		this.tempoEsperaCompraIng = 0;
	}

	@Override
	public void run() {
		if (loginSistema()) {
			if (processoCompra()) {
				try {
					semaforo.acquire();
					validacaoCompra();
				} catch (InterruptedException e) {
					e.printStackTrace();
				} finally {
					semaforo.release();
				}
			}
		}
	}

	private boolean loginSistema() {
		this.tempoEsperaLogin = getRandomTime(2000, 500);
		try {
			sleep(this.tempoEsperaLogin);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		if (this.tempoEsperaLogin >= 1000) {
			System.out.println("O cliente #" + idPessoa + " tentou realizar login e recebeu timeout após " + this.tempoEsperaLogin + "ms.");
			return false;
		} else {
			System.out.println("O cliente #" + idPessoa + " conseguiu logar no sistema após " + this.tempoEsperaLogin + "ms.");
			return true;
		}
	}

	private boolean processoCompra() {
		this.tempoEsperaCompra = getRandomTime(3000, 1000);
		try {
			sleep(this.tempoEsperaCompra);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		if (this.tempoEsperaCompra >= 2500) {
			System.out.println("Timeout: A sessão do cliente #" + idPessoa + " estourou o tempo após " + this.tempoEsperaCompraIng + "ms. e por isso não conseguirá realizar a compra dos ingressos:/");
			return false;
		} else {
			System.out.println("O cliente #" + idPessoa + " realizou uma solicitação de compra de ingressos!");
			return true;
		}
	}

	private void validacaoCompra() {
		if (quantingressosTotal - quantingressos >= 0) {
			quantingressosTotal -= quantingressos;
			System.out.println("O cliente #" + idPessoa + " conseguiu comprar seus " + quantingressos + " ingressos!");
			System.out.println("Restam apenas " + quantingressosTotal + " ingressos na bilheteria");
		} else {
			System.out.println("O cliente #" + idPessoa + " não conseguiu comprar seus " + quantingressos + " ingressos, pois a quantidade de ingressos disponíveis é inferior ao que foi solicitado pelo cliente.");
		}
	}

	public int getRandomTime(int max, int min) {
		Random rd = new Random();
		return rd.nextInt(max - min + 1) + min;
	}

}
